

一、Redis依赖包安装
yum install gcc tcl 

二、安装redis
tar xf redis-3.2.9.tar.gz 
cd redis-3.2.9
make && make install && echo $?

cp src/redis-trib.rb /usr/local/bin/
cp /usr/local/bin/redis-* /usr/bin/


三、配置redis
1.前提:创建一下目录
mkdir -pv /etc/redis 
mkdir -pv /var/redis/{sentinel,6379,run,logs,scripts}


2.配置主从
master配置文件如下:

cat >/etc/redis/6379.conf<<-EOF
daemonize yes 
pidfile /var/redis/run/redis-6379.pid
port 6379
protected-mode no
tcp-backlog 511
timeout 0
tcp-keepalive 0
loglevel notice
logfile "/var/redis/logs/redis-6379.log"
databases 16 
save 900 1 
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb 
dir /var/redis/6379 
requirepass 123456
masterauth 123456
slave-serve-stale-data yes
slave-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-disable-tcp-nodelay no
slave-priority 100
appendonly no
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0 
notify-keyspace-events "" 
hash-max-ziplist-entries 512 
hash-max-ziplist-value 64 
list-max-ziplist-entries 512 
list-max-ziplist-value 64 
set-max-intset-entries 512 
zset-max-ziplist-entries 128 
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes
client-output-buffer-limit normal 0 0 0 
client-output-buffer-limit slave 256mb 64mb 60 
client-output-buffer-limit pubsub 32mb 8mb 60 
hz 10
aof-rewrite-incremental-fsync yes
EOF


3.slave配置文件直接复制master,修改以下内容
slaveof 10.96.28.135 6379 	#作为6379实例的slave



4.启动
master
redis-server /etc/redis/6379.conf 
slave
redis-server /etc/redis/6379.conf 

5.验证
redis-cli -c -h localhost -p 6379 -a 123456 
>set test 123

slave
redis-cli -c -h localhost -p 6379 -a 123456 
>get test
"123"
说明主从配置成功




四、开启哨兵(sentinel)模式
1.sentinel配置文件如下

cat >/etc/redis/26379.conf<<-EOF
port 26379
daemonize yes
protected-mode no
pidfile "/var/redis/run/redis-26379.pid"
dir /var/redis/sentinel 
logfile "/var/redis/logs/sentinel.log"
sentinel monitor mymaster 10.96.28.135 6379 1
sentinel down-after-milliseconds mymaster 1000
sentinel failover-timeout mymaster 60000
sentinel auth-pass mymaster 123456
sentinel parallel-syncs mymaster 1
EOF


redis-sentinel /etc/redis/26379.conf

2.redis常用命令
连接指定redis实例
redis-cli -c -h 10.96.28.135 -p 6379 -a 123456

	查询所有key
	10.10.0.159:6379> keys *
	删除指定key
	10.10.0.159:6379> del sample
	批量删除(内置shell不支持通配符或正则表达式)
	redis-cli -h 10.10.0.159 -p 6379 -a test123 KEYS sample* | redis-cli -h 10.10.0.159 -p 6379 -a test123 DEL 查看实例配置信息及状态
	10.10.0.159:6379> info
	更多命令行参阅http://doc.redisfans.com/



3.启动脚本
redis(6379)启动脚本:

#!/bin/sh
#
#chkconfig: 2345 80 90
# Simple Redis init.d script conceived to work on Linux systems # as it does use of the /proc filesystem.
REDISPORT=6379 
EXEC=/usr/local/bin/redis-server 
CLIEXEC=/usr/local/bin/redis-cli
PIDFILE=/var/redis/run/redis-${REDISPORT}.pid 
CONF="/etc/redis/${REDISPORT}.conf" 
PASSWD=123456
source /etc/init.d/functions 


start() {
if [ -f $PIDFILE ];then
	echo	"$PIDFILE exists, process is already running or crashed"
else
	echo	"Starting Redis server..."
	$EXEC $CONF
fi
}


stop() {
if [ ! -f $PIDFILE ];then
	echo "$PIDFILE does not exist, process is not running" 
else
	PID=$(cat $PIDFILE)
	echo "Stopping ..."
	$CLIEXEC -p $REDISPORT -a $PASSWD shutdown
	while [ -x /proc/${PID} ]
	do
		echo "Waiting for Redis to shutdown ..."
		sleep 1
	done
	echo "Redis stopped"
fi
}

status() {
if [ -f $PIDFILE ] && netstat -tnl |grep $REDISPORT &>/dev/null
then
	echo "`basename $0` is running,PID is `cat $PIDFILE`"
else
	echo "`basename $0` is stopped."
fi
}


restart() { 
stop
start
}


case "$1" in 
	start)
	start
	;;
	stop) stop
	;; 
	status) 
	status 
	;; 
	restart) 
	restart 
	;;
	*)
	echo -e  "\033[32mUsage: service `basename $0` {start|stop|status|restart}\033[0m"
	exit 2
	;;
esac


dos2unix  /etc/init.d/redis
chmod +x /etc/init.d/redis

/etc/init.d/redis 		start|stop|status|restart


4.sentinel启动脚本:

#!/bin/sh
#
#chkconfig: 2345 80 90
# Simple Redis init.d script conceived to work on Linux systems 
# as it does use of the /proc filesystem.
REDISPORT=26379 
EXEC=/usr/local/bin/redis-server 
CLIEXEC=/usr/local/bin/redis-cli
PIDFILE=/var/redis/run/redis-${REDISPORT}.pid 
CONF="/etc/redis/${REDISPORT}.conf" 
PASSWD=123456
source /etc/init.d/functions 

start() {
if [ -f $PIDFILE ];then
	echo "$PIDFILE exists,process is already running or crashed"
else
	echo "Starting Redis server..."
	$EXEC $CONF --sentinel 
fi
}

stop() {
if [ ! -f $PIDFILE ];then
	echo "$PIDFILE does not exist, process is not running" 
else
	PID=$(cat $PIDFILE)
	echo "Stopping ..."
	$CLIEXEC -p $REDISPORT -a $PASSWD shutdown
	while [ -x /proc/${PID} ]
	do
		echo "Waiting for Redis to shutdown ..."
		sleep 1
	done
	echo "Redis stopped"
fi
}


status() {
if [ -f $PIDFILE ] && netstat -tnl |grep $REDISPORT &>/dev/null
then
	echo "`basename $0` is running,PID is `cat $PIDFILE`"
else
	echo "`basename $0` is stopped"
fi
}

restart() { 
stop
start
}

case "$1" in 
	start)
	start
	;;
	stop) 
	stop
	;; 
	status) 
	status 
	;; 
	restart) 
	restart 
	;;
	*)
	echo -e  "\033[32mUsage: service `basename $0` {start|stop|status|restart}\033[0m"
	exit 2
	;;
esac


dos2unix  /etc/init.d/redis-sentinel
chmod +x  /etc/init.d/redis-sentinel

/etc/init.d/redis-sentinel	start|stop|status|restart



五、漂移 VIP
	那么现在的问题是,如何在进行redis故障转移时,将VIP漂移到新的主redis服务器上。这里可以使用redis sentinel的一个参数client-reconfig-script,这个参数配置执行脚本,sentinel在做failover的时候会执行这个脚本,并且传递6个参数<master-name>、<role>、<state>、<from-ip>、<from-port>、<to-ip> 、<to-port>,其中<to-ip>是新主redis的IP地址,可以在这个脚本里做VIP漂移操作。

	sentinel client-reconfig-script mymaster /var/redis/scripts/notify_master6379.sh


		(1).从新配置redis-sentinel配置文件添加新参数
		vim /etc/redis/26379.conf

cat >/etc/redis/26379.conf<<-EOF
port 26379
daemonize yes
protected-mode no
pidfile "/var/redis/run/redis-26379.pid"
dir /var/redis/sentinel 
logfile "/var/redis/logs/sentinel.log"
sentinel monitor mymaster 10.96.28.135 6379 1
sentinel down-after-milliseconds mymaster 1000
sentinel failover-timeout mymaster 60000
sentinel auth-pass mymaster 123456
sentinel parallel-syncs mymaster 1
sentinel client-reconfig-script mymaster /var/redis/scripts/notify_master6379.sh
EOF




		(2).修改三个服务器的 redis-sentinel 配置文件/opt/redis/conf/26379.conf,增加上面一行。然后在/opt/redis/scripts/目录下创建notify_master6379.sh 脚本文件,这个脚本做 VIP 漂移操作, 内容如下:


	 	vim /etc/redis/scripts/notify_master6379.sh

#!/bin/bash
MASTER_IP=$6 				#第六个参数是新主 redis 的 ip 地址
LOCAL_IP=`ifconfig bond0|awk -F ":" 'NR==2{print $2}'|awk '{print $1}'` 	#其他两个服务器上为10.96.28.136,10.96.28.137
VIP='10.96.28.140'
NETMASK='24'
INTERFACE='bond0'

if [[ "${MASTER_IP}" == "${LOCAL_IP}" ]];then
	/sbin/ip addr add ${VIP}/${NETMASK} dev ${INTERFACE}  &&         #将VIP绑定到该服务器上
	/sbin/arping -q -c 3 -A ${VIP} -I ${INTERFACE}
	exit 0 
else
	/sbin/ip addr del ${VIP}/${NETMASK} dev ${INTERFACE}		 #将VIP从该服务器上删除
	exit 0
fi

exit 1


	dos2unix /opt/redis/scripts/notify_master6379.sh
	chmod +x /opt/redis/scripts/notify_master6379.sh

	exit 1 		#如果返回 1,sentinel 会一直执行这个脚本
	(3).现在当前主redis是10.96.28.135,第一次,需要手动绑定VIP到该服务器上。
		/sbin/ip addr add 10.96.28.140/24 dev bond0
		/sbin/arping -q -c 3 -A 10.96.28.140 -I bond0
	(4).然后,去另一个服务器上通过VIP地址测试连接redis-server和redis-sentinel。



六、测试
	#for循环写想VIP写入数据进行测试
    for ((i=0;i<10000;++i));do redis-cli -c -h 10.96.28.140 -p 6370 -a 123456 set zst$i "The Best MySQL edu at zhishutang.com :)";done
